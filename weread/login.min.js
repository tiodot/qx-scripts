async function processRequest(t){try{$.log("开始处理微信读书登录请求...");const e=t.headers,s=e.vid||"";let i=parseRequestBody(t.body);const o={vid:s,requestBody:i,headers:e,captureTime:(new Date).toISOString()};$.msg(NOTIFY_TITLE,NOTIFY_SUCCESS_MSG,"VID: "+s);let r=JSON.stringify(o,null,2);if(debugMode&&$.log("微信读书登录信息:\n"+r),enableGistUpload&&githubToken){const t=await pushToGist(r);t.success?$.msg(NOTIFY_TITLE,NOTIFY_GIST_SUCCESS,t.message||""):$.msg(NOTIFY_TITLE,NOTIFY_GIST_ERROR,t.message||"")}return t}catch(e){return $.log(`处理请求时出错: ${e}`),$.msg(NOTIFY_TITLE,NOTIFY_ERROR_MSG,e.toString()),t}}function parseRequestBody(t){if(!t)return{};try{const e=decodeURIComponent(t);if(e.trim().startsWith("{")&&e.trim().endsWith("}"))return JSON.parse(e);const s={};return e.split("&").forEach(t=>{const[e,i]=t.split("=");e&&i&&(s[e]=decodeURIComponent(i))}),s}catch{return{raw:t}}}async function pushToGist(t){try{if(!githubToken)return{success:!1,message:"GitHub Token未设置"};const e={Authorization:`token ${githubToken}`,"Content-Type":"application/json","User-Agent":"WeReadLoginMonitor"};if(!gistId)return await createNewGist(t,e);try{return await updateGist(t,e)}catch(s){return $.error(`更新Gist时出错: ${s}`),await createNewGist(t,e)}}catch(t){return $.error(`Gist操作出错: ${t}`),{success:!1,message:`操作失败: ${t.message||t}`}}}async function updateGist(t,e){const s={description:gistDescription,files:{[gistFilename]:{content:t}}},i=await $.patch({url:`https://api.github.com/gists/${gistId}`,headers:e,body:JSON.stringify(s)}).then(t=>(debugMode&&$.log(`Gist更新结果: ${JSON.stringify(t,null,2)}`),{status:t.statusCode,body:t.body}));return 200===i.status?(debugMode&&$.log(`Gist更新成功: ${gistId}, 文件: ${gistFilename}`),gistId||$.setVal("wr_gist_id",targetGistId),{success:!0,message:`Gist已更新: ${targetGistId}`}):($.log(`Gist更新失败: ${JSON.stringify(i)}`),{success:!1,message:`Gist更新失败: ${i.status}`})}async function createNewGist(t,e){try{const s={description:gistDescription,public:!1,files:{[gistFilename]:{content:t}}},i=await $.post({url:"https://api.github.com/gists",headers:e,body:JSON.stringify(s)}).then(t=>({status:t.statusCode,body:t.body}));if(201===i.status)try{const t=JSON.parse(i.body),e=t.id;if(e)return $.setVal("wr_gist_id",e),debugMode&&$.log(`新Gist已创建: ${e}, 文件: ${gistFilename}`),{success:!0,message:`新Gist已创建: ${e}`}}catch(t){$.log(`解析Gist创建响应失败: ${t}`)}return $.log(`Gist创建失败: ${JSON.stringify(i)}`),{success:!1,message:`Gist创建失败: ${i.status}`}}catch(t){return $.log(`创建Gist时出错: ${t}`),{success:!1,message:`创建失败: ${t.message||t}`}}}class QXEnv{constructor(t,e){if("undefined"==typeof $task)throw new Error("请在Quantumult X环境中运行此脚本");this.name=t,this.opts=e||{},this.startTime=Date.now(),this.log(`🔔${this.name}, 开始!`)}done(t={}){const e=Date.now(),s=(e-this.startTime)/1e3;this.log("",`🔔${this.name}, 结束! 🕛 ${s} 秒\n`),$done(t)}log(...t){console.log(`[${this.name}]`,...t)}error(...t){this.log(`❗️[${this.name}][错误]`,...t)}msg(t="",e="",s="",i={}){"string"==typeof i?i={"open-url":i}:i&&"object"==typeof i||(i={});const o={};let r=i["open-url"]||i.url||i.openUrl||$open;r&&Object.assign(o,{"open-url":r});let n=i.mediaUrl||i["media-url"]||$media;n&&Object.assign(o,{"media-url":n});let a=i["update-pasteboard"]||i.updatePasteboard||$copy;a&&Object.assign(o,{"update-pasteboard":a}),$notification.post(t,subt,s,o)}getVal(t){return $prefs.valueForKey(t)}setVal(t,e){return $prefs.setValueForKey(e,t)}queryStr(t){return t&&"object"==typeof t?Object.keys(t).map(e=>`${e}=${encodeURIComponent(t[e])}`).join("&"):""}formatHeaders(t){t&&t.headers&&(delete t.headers["Content-Type"],delete t.headers["Content-Length"],delete t.headers["content-type"],delete t.headers["content-length"]),void 0===t.followRedirect||t.followRedirect||(t.opts?t.opts.redirection=!1:t.opts={redirection:!1}),t.params&&(t.url+="?"+this.queryStr(t.params))}get(t){return this.formatHeaders(t),this.send(t)}post(t){return this.formatHeaders(t),t.method||(t.method="POST"),t.body&&t.headers&&!t.headers["Content-Type"]&&!t.headers["content-type"]&&(t.headers["content-type"]="application/x-www-form-urlencoded"),this.send(t)}patch(t){return t.method="PATCH",this.post(t)}send(t){const e=(t,e=1e3)=>Promise.race([t,new Promise((t,s)=>{setTimeout(()=>{s(new Error("请求超时"))},e)})]),s=$task.fetch(t).catch(t=>{throw this.log(`请求失败: ${t}`),t});return this.opts.timeout?e(s,this.opts.timeout):s}}const $=new QXEnv("微信读书登录信息监控");let githubToken=$.getVal("wr_github_token")||"",gistId=$.getVal("wr_gist_id")||"",gistFilename=$.getVal("wr_gist_filename")||"weread_login_info.json",gistDescription=$.getVal("wr_gist_description")||"微信读书登录信息",enableGistUpload="true"===$.getVal("wr_enable_gist"),debugMode=!0;const NOTIFY_TITLE="微信读书登录信息",NOTIFY_SUCCESS_MSG="登录信息已成功提取",NOTIFY_ERROR_MSG="登录信息提取失败",NOTIFY_GIST_SUCCESS="已成功上传到Gist",NOTIFY_GIST_ERROR="Gist上传失败";processRequest($request).catch(t=>{$.error(`处理请求时出错: ${t}`)}).finally(()=>{$.done()});